
{% set menu = false %}
{% macro renderTree(tree, level, filename) %}
    <ul class="tree_list">
        {% for item in tree %}
            <li>
                <a href="javascript:select({{ item.id }})"
                   onmouseover="highlightElement({{ item.id  }})"
                   onmouseout="removeHighlight({{ item.id  }})">
                    <strong>{{ item.tag }}</strong>
					{% if item.class is not empty %}
                    {#
                        (Classes: {{ item.class | join(', ') }})
                    #}
                    {% endif %}
                </a>
                    <a href="/admin/pages/{{filename}}.tree?id={{item.id}}&action=add">‚ûï add</a>
                    <a href="/admin/pages/{{filename}}.tree?id={{item.id}}&action=copy">üìÅ copy</a>
                {% if item.children is not empty %}
                    {{ _self.renderTree(item.children, level + 1, filename) }}
                {% endif %}
            </li>
        {% endfor %}
    </ul>
{% endmacro %}

{% from _self import renderTree %}
{% extends '../../templates/layout.twig' %}
{% block body %}

    <body class="margin--0">
	
        {{ renderTree(tree, 0, filename) }}
        <script>
            function findElementByIndexAndLevel(root, tagIndex, level, currentLevel = -1, currentIndex = { value: -1 }) {
               
               if (currentLevel === level) {
                    currentIndex.value++; // Incr√©menter le compteur pour l'index
                    if (currentIndex.value === tagIndex) {
                        return root; // On a trouv√© l'√©l√©ment
                    }
                }

                // Parcourir les enfants pour continuer la recherche
                for (let child of root.children) {
                    const found = findElementByIndexAndLevel(child, tagIndex, level, currentLevel + 1, currentIndex);
                    if (found) {
                        return found; // Retourner l'√©l√©ment si trouv√©
                    }
                }

                return null; // Retourne null si l'√©l√©ment n'est pas trouv√©
            }

            function highlightElement(tagIndex, level) {
                const frameDocument = window.parent.frames[0].document;

                // Commence la recherche dans le `<main>` pour ignorer `<body>` et `<main>`
                const element = findElementByIndexAndLevel(frameDocument.querySelector('body'), tagIndex, level);

                if (element) {
                    element.classList.add('highlight');
                }
            }

            function removeHighlight(tagIndex, level) {
                const frameDocument = window.parent.frames[0].document;

                const element = findElementByIndexAndLevel(frameDocument.querySelector('body'), tagIndex, level);

                if (element) {
                    element.classList.remove('highlight');
                }
            }
            function select(id) {
                let parent = window.parent;
                let frames = parent.document.getElementById("frames");
                const frameDocument = window.parent.frames[2].document;
                let filename = "{{filename}}";
                parent[2].location.href = `/admin/pages/${filename}.propreties?id=${id}`;
                frames.setAttribute("rows", "50%,50%");
                highlightElement(tagIndex, level);
                //console.log(parent[2].location.href);
                /*
                const element = findElementByIndexAndLevel(frameDocument.querySelector('main'), tagIndex, level);

                if (element) {
                    element.classList.remove('highlight');
                }*/
            }
</script>

    </body>
{% endblock %}
